{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome page","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome! This is the personal website of Andrey Podoprigora Here you can find all information regarding his individual contributions within the Team 204 embedded system design project</p>"},{"location":"#target-subsystem","title":"Target Subsystem","text":"<p>I am responcible for developing the Sensor subsystem of the current project</p>"},{"location":"#on-this-website","title":"On this website","text":"<ul> <li>Personal Block Diagram</li> <li>Personal Component Selection</li> <li>Personal Subsystem Schematics</li> <li>Personal Bill of Materials</li> <li>About Student</li> </ul>"},{"location":"About-me/","title":"About Student","text":""},{"location":"About-me/#hi-there-my-name-is-andrey","title":"Hi there, my name is Andrey\ud83d\ude0e!","text":"<ul> <li>I am currently a junior level student studying in Arizona State University!</li> <li>My degree is Robotics(Robotic Enginnering), and I absolutely love it\ud83e\uddbe</li> <li>My home country is Kazakhstan! It is located in the very center of Eurasia, and obtains 9th place in the world by territory!</li> </ul>"},{"location":"About-me/#my-points-of-studying-the-course-of-egr314-this-semester","title":"My points of studying the course of EGR314 this semester","text":"<ol> <li>To learn how to design and produce microelectronic systems and devices using microcontrollers like ESP32 and advanced curciut manufacturing techniques</li> <li>To design and create a cool and majectic project based on that knwoledge\ud83e\udd29!</li> </ol>"},{"location":"About-me/#contact-info","title":"Contact info","text":"<p>e-mail: apodopri@asu.edu</p>"},{"location":"Personal-API/","title":"Overview","text":"<p>The Application Programming Interface (API) describes the features of data transfer between two/multiple computers(devices). In our API-describing documents our team will provide information on what types of messages are being sent between different devices, along with outline of which subsystem should act as receiver/transmitter in case of each separate message. Below I present the API specification of the messages received/transmitted by the Sensor Subsystem</p>"},{"location":"Personal-API/#message-protocol","title":"Message Protocol","text":""},{"location":"Personal-API/#messages-transmitted-by-the-sensor-subsystem","title":"Messages Transmitted by the Sensor Subsystem","text":"<p>These are messages that the Sensor Subsystem transmits to the rest of the device subsystems. Each table demonstrates the message structure with along with a description of how it works and who will recieve the message.</p>"},{"location":"Personal-API/#set-motor-1-to-speed-x-and-motor-2-to-speed-y","title":"Set Motor 1 to Speed X and Motor 2 to Speed Y","text":"Type Byte 1 Byte 2 Byte 3 Variable Name message_type motor_1_speed motor_2_speed Variable Type uint8_t uint8_t uint8_t Min Value 0 0 0 Max Value 8 100 100 Example 2 25 75 <p>Sent to:  Motor subsystem(Jacob)  Purpose:  This message is designed to provide the Motor(Actuator) Subsystem with the relevant data for configuring/adjusting the target-chasing movement and trajectory of the project's robot. Since the Motor Subsystem incorporates a double-motor based design, the message contains two variables, describing the desired speed levels for each of the two motors, calculated beforehand within the operational range of the Sensor subsystem. The mentioned speed values are expressed in the form of an unsigned integer numbers representing percent levels between 0 and 100, such that 0 is a 0% and 100 is 100%.</p>"},{"location":"Personal-API/#update-displayed-tracking-distance-x","title":"Update Displayed Tracking Distance X","text":"Type Byte 1 Byte 2 Variable Name message_type tracking_distance Variable Type uint8_t uint8_t Min Value 0 0 Max Value 8 100 Example 5 65 <p>Sent to:  UI subsystem(Jake), Wi-fi subsystem(Divine)  Purpose:  The single purpose of this message is to deliver data on the currently-observed distance between the robot and a tracking object to the built-in User Interface (UI) as well as to any relevant external UI-s (e.g. pc monitor, laptop, phone screen), accessible thorugh the Wi-fi communication. Aside from the identifiction bytem it contains only one uint_8 type variable, representing the observed distance in cm(\"0\" -&gt; 0 cm, \"65\" -&gt; 65 cm)</p>"},{"location":"Personal-API/#subsystem-z-status-report","title":"Subsystem Z Status Report","text":"Type Byte 1 Byte 2 Byte 3 Variable Name message_type sender_id status_code Variable Type uint8_t uint8_t uint8_t Min Value 0 1 1 Max Value 8 4 25 Example 7 2 21 <p>Sent to:  UI subsystem(Jake), Wi-fi subsystem(Divine)  Purpose:  This type of messages is responsible for reporting the currently-observed status of the Sensor Subsystem to the various User Interfaces for maintenance, debugging and/or operation control purposes. The status-related data is delivered through a single uint8 variable, capable of taking values from (1) to (Max Value), with each number representing one and only type of a Sensor Subsystem condition; f.e. : \"2\" -&gt; \"Sensor subsystem is currently transmitting data to the Motor Subsystem\", \"5\" -&gt; \"1 sensor is successfully observing the target object\", \"6\" - \"2 sensors are successfully observing the target object\"</p>"},{"location":"Personal-API/#subsystem-z-error-report","title":"Subsystem Z Error Report","text":"Type Byte 1 Byte 2 Byte 3 Variable Name message_type sender_id error_code Variable Type uint8_t uint8_t uint8_t Min Value 0 1 1 Max Value 8 4 25 Example 8 3 21 <p>Sent to:  UI subsystem(Jake), Wi-fi subsystem(Divine)  Purpose:  This type of messages is responsible for reporting the currently-registered errors of the Sensor Subsystem to the various User Interfaces for maintenance, debugging and/or operation control purposes. The error-related data is delivered through a single uint8 variable, capable of taking values from (1) to (Max Value), with each number representing one and only type of a Sensor Subsystem error; f.e. : \"2\" -&gt; \"First sensor is not responding\", \"3\" -&gt; \"Second sensor is not responding\", \"6\" - \"Sensors #1 and #3 are not responding\"</p>"},{"location":"Personal-API/#messages-received-by-the-sensor-subsystem","title":"Messages Received by the Sensor Subsystem","text":"<p>These are messages that the Sensor Subsystem receives from other subsystems of the device. Each table demonstrates the message structure with along with a description of how it works and who is responcible for transmitting each type of message.</p>"},{"location":"Personal-API/#start-stop-subsystem-z","title":"Start / Stop Subsystem Z","text":"Type Byte 1 Byte 2 Byte 3 Variable Name message_type target_subsystem control_signal Variable Type uint8_t uint8_t uint8_t Min Value 0 1 0 Max Value 8 4 1 Example 1 3 1 <p>Received from:  UI subsystem(Jake), Wi-fi subsystem(Divine)  Purpose:  The message with an exclusive capability to externally \"turn off\"(put in a software sleep mode), as well as \"turn on\"(awake from the software sleep mode) various subsystems of the device, including the Sensor-elated one. Because the message type is designed to be utilised with multiple subsystems, the sender is required not only to specify the control signal(on/off), but also point out to the target subsystem through a code based uint8 variable(e.g. \"1\" -&gt; \"Motor Subsystem\", \"2\" -&gt; \"Sensor Subsystem\")</p>"},{"location":"Personal-API/#change-distance-keeping-threshold-to-x","title":"Change Distance Keeping Threshold to X","text":"Type Byte 1 Byte 2 Variable Name message_type distance_treshold Variable Type uint8_t uint8_t Min Value 0 0 Max Value 8 100 Example 3 25 <p>Received from:  UI subsystem(Jake), Wi-fi subsystem(Divine)  Purpose:  The message type that configures the distance keeping trechold value for the object-tracking operations within the Sensor Subsystem. Can be sent from both external and internal UI-s, requires a uint8-type variable specifying the desired treshold value in cm (\"0\" -&gt; 0cm, \"100\" -&gt; 100cm)</p>"},{"location":"Personal-API/#other-types-of-messages","title":"Other Types of Messages","text":"<ul> <li>Any message that I recieve that I do not have a protocol to handle the system will delete the message to help clean up the system and reduce clogging.</li> <li>If I recieve a message that I sent but no one recieved it I will delete the message so that the message is not cycling forever clogging the message system.</li> <li>Any message that I recieve that is not directed towards me but is directed to another teammember will be passed over to the next teammate in the subsystem so that they may recieve the message.</li> <li>If a message is addressed to someone not in my team then the system will delete the message preventing clogging due to dud messages.</li> </ul>"},{"location":"Personal-Bill-of-Materials/","title":"Personal Bill of Materials","text":""},{"location":"Personal-Bill-of-Materials/#related-links-and-references","title":"Related Links and References","text":"<p>Link to the PDF version of the table shown above</p> <p>Link to the Google Sheets version of the table shown above</p>"},{"location":"Personal-Block-Diagram/","title":"Personal Block Diagram","text":""},{"location":"Personal-Block-Diagram/#general-description","title":"General Description","text":"<p>The Block Diagram schematic that you can see below is responcible for demonstrating all connections between the MCU(Microcontroller) and all in-circuit elements/devices that are implemented within the Sensor Subsystem of Team 204 project device. Those elements include: - PIC18F26Q10 -&gt; MCU from the PIC device family - 3x VL53L4CD -&gt; Time-of-flight sensors implementing functionality of sensor-to-microcontroller data transfer over an I2C serial communication channel - 3x TXS0102 -&gt; Voltage Level Translators, responcible for synchronising communications between the MCU and the sensors, due to these devices operating on a different voltage levels(3.3V &amp; 2.8V) - 2x LED-s -&gt; red and green Light Emitting Diodes, serving for debugging purposes - Push Button -&gt; a standart SMD-type in-circuit push button, serving for the debugging purposes along with the LED-s - UART communication channel -&gt; two pins were reserved to serve as a TX and RX terminals of the inter-system(Team level) serial communication channel utilizing the UART protocol</p> <p></p>"},{"location":"Personal-Block-Diagram/#important-notes","title":"Important Notes","text":"<ul> <li>In the last version of the system's hardware structure, two independent voltage regulators are required in order to ensure the proper operation of the device - 3.3V and 2.8V output correspondingly. As expected, the 3.3V voltage regulator is responcible for providing power to the MCU(Microcontroller), 2 on-board LED-s and a pushbutton, while 2.8V regulator will be powering 3 sensors. Delivering the exact voltage level of 2.8V to each sensor was considered important, as despite the fact that sensors of VL53 family can operate relatively stable with the 3.3V, the manufacturer's datasheet strongly recommends utilizing 2.8V for enhanced measurement precision and faster rate of data transfer</li> <li>3-pin clusters labeled \"Output Enable\" and \"Sensor Hardware interrupt\" are crucial to the proper operation of the system. \"Output Enable\" pins are responcible for \"turning on\"(setting into the Active mode) the 3.3-2.8V Voltage regulators on the ToF Sensors daughterboards; they must be configured as Digital Output pins on the MCU's end. On the other hand, \"Sensor Hardware Interrupt\" are handling the task of getting the MCU to know when the scanning data is ready for reception, by raising a corresponding Interrupt; they they must be configured as Digital Input pins on the MCU's end</li> </ul>"},{"location":"Personal-Block-Diagram/#development-changes-and-adjustments","title":"Development Changes and Adjustments","text":"<p>The first version of the Block Diagram, prepared and released at the time of February, 2025, was found to be extremely unpractical, unefficient and, in some cases - even misleading. After a coherent revision, the updated version of the Block Diagram was produced, now incorporating elements that came to existence due to changes and updates in device's hardware structure. Below is placed the list representing what exact adjustments and modifications were added to this document: - Multiple Separate I2C lines issue was fixed: now all 3 ToF sensors are tied to just a single serial communication line - Introduced a schematic representation of the 2.8V regulator as a power source for ToF sensors - Added clusters of digital I/O pins for handling sensor-produced hardware interrupts and managing the operation states of the Voltage Level Translators (On/Off) - Introduced MasterClear, Data and Clock pins handling the In-Circuit Serial Programming - Fixed the issue with incorrect/misleading inter-pin connections labeling</p>"},{"location":"Personal-Block-Diagram/#related-links-and-references","title":"Related Links and References","text":"<p>Link to the PDF version of the Block Diagram shown above</p>"},{"location":"Personal-Component-Selection/","title":"1. Major Component Selection","text":""},{"location":"Personal-Component-Selection/#inroduction-to-the-component-selection-process","title":"Inroduction to the Component Selection Process","text":"<p>The type of sensor proposed and selected earlier for this semester\u2019s group project is a distance measuring sensor. Nowadays, a variety of physical phenomena is utilised to create this type of sensors, including, but not limited to: infrared emitting, ultrasonic \u201clistening\u201d and laser-based detection. Taking into account the guidelines of the current project, the sensor selection process was performed under the following considerations: the sensor chip should incorporate at least 1 serial communication interface(I2C, SPI or UART); the sensor chip shall not exceed the volumetric borders of imaginary parallelepiped with dimensions of 3x3x1.5 cm; the sensor chip should not come from the manufacturer as a part of \u201cdaughterboard\u201d-type PCB, unless the chip itself is too small or excessively complex to be manually soldered on the self-designed PCB (although the team member can decide to either incorporate the sensor into a single PCB with MCU, or to allocate it to its own \"daughterboard\", the second option is more preferred considering the project's device format and the correlated need to dislocate at least three sensors, poitning into different directions from the horizontal plane)</p>"},{"location":"Personal-Component-Selection/#updates-and-changes-to-the-component-selection-process","title":"Updates and changes to the Component Selection Process","text":"<p>Although, the Component Selection configuration depicted on this webpage wasn't radically modified or adjusted, a couple of noticeable changes were inevitable to occur along the path of correcting the previously-unknown structural discrepancies and ineffective electrical/mechanical solutions.  One of the most important updates, is the so-called \"paradigm shift\" in regards to the approach of organizing the power delivery to the distance sensors. As it was mentioned in the previous documents(e.g. Block Diagram), the powering scheme of the ToF distance sensors was defined to rely on a 2.8V supply, instead of a standartised 3.3V. In order to account for this design rule, the first version of the Component Selection outline offered a \"one-for-each\" solution - each sensor daughterboard was supposed ot be equipped with its own 2.8V LDO Voltage regulator. After conducting a thorough review and analysis of the feedback received during the External Design Review, a decision was made to shift from the \"one-for-each\" strategy towards a shared power source-based structure. Instead of 3+ LDO regulators, a single Switching Voltage regulator concept was introduced - this regulator, configured to output exactly 2.8V, would stand on the same \"motherboard\" as the main, 3.3V regulator, and both regulators will be parallelly \"tied\" to the external 9V power supply(for simplicity of parts ordering, and PCB design, a decision was made to use a single model of a Switching Voltage Regulator - LM2575). A sample distance sensor daughterboard, in its order, will get access to that power supply over a jumper wire pair (+2.8V &amp; GND), that is supposed to connect to the male pin header/-s, integrated directly into the motherboard. Along with this, in order to sycnhronise and balance the serial communication between a 3.3V-powered MCU and a 2.8V-powered sensors, a Voltage Level Translators were incorporated into the structure of each sensor's daughterboard, in order to handle the data transfer processes on SDA and SCL lines. Schematic representation of how exactly the Voltage Level Translators are connected to the surrounding circuit elements in order to perfrom the previously-mentioned \"translations\" will be described in details at the Subsystem Schematics page</p>"},{"location":"Personal-Component-Selection/#distance-sensor-selection","title":"Distance Sensor Selection","text":"Solution Pros Cons * Option 1.* VL53L4CD Time-of-Flight high accuracy low power proximity sensor * $1/each * link to product * Provides up to 1.3 meters of scanning distance range* Extremely compact and miniature (4.4 x 2.4 x 1 mm size)* Successfully operates under the standardized power supply of 3.3 Volts* Capable of reaching the communication frequency up to 1 MHz (I2C-based)* Incorporates a system driver based on the so-called \u201cUltra Light Driver\u201d (ULD) - an API set developed by manufacturer(STMicroelectronics) as a uniform solution for various sensor models, that is actively supported and updated * Comes in a Land Grid Array(LGA)-type packaging, which is expected to be hard for traditional(solder iron-based) soldering (12 pins in total)* Provides Field of View(FoV) angle of only 18 degrees within a single plane * Option 2. * VL53L8CH high performance 8x8 multi zone Time-of-Flight (ToF) sensor * $8.53/each * Link to product * Capable of performing scanning within a broad FoV, reaching the detection range within 45 degrees across the center of the sensor both in vertical and horizontal planes * Supports both I2C and SPI interfaces for communication with the Host MCU  * Capable of detecting objects located as far as 4 meters(!) from the sensor * Comes in a Land Grid Array(LGA)-type packaging, which is expected to be hard for traditional(solder iron-based) soldering (17 pins in total) * Typical application schematic suggest the production of a developed Host MCU-to-sensor connection structure with noticeable amount of circuit elements(7 distinct resistors and 3 capacitors), which complicates the design process of the associated PCB * Option 3. * VL53L1CXV0FY/1 long distance ranging Time-of-Flight sensor * $5.77/each * Link to product * Provides a single-plane FoV of 27 degrees both in horizontal and vertical planes * Support switching between 3 \u201cDistance Modes\u201d (short, medium &amp; long), varying at the maximum range of scanned distance, that allow to optimize the object detection processes * Capable of detecting objects located as far as 4 meters(!) from the sensor * Comes in a Land Grid Array(LGA)-type packaging, which is expected to be hard for traditional(solder iron-based) soldering (17 pins in total) * Capable of communicating with the Host MCU at the maximum rate of only 400 kHz * Provided with an older, single model-based version of VL53 family API for the system driver"},{"location":"Personal-Component-Selection/#choice","title":"Choice:","text":"<p>Option #1 =&gt; VL53L4CD Time-of-Flight high accuracy low power proximity sensor</p>"},{"location":"Personal-Component-Selection/#rationale","title":"Rationale:","text":"<p>Based on the data, presented in the chart above, the most reasonable choice for the sensor subsystem in the scope of the current project would be the VL53L4CD (option #1). It possesses adequate object detection range (up to 1.3) meters, provided with a modern and well-supported API for a system driver, and, what is especially important being reminded the usage context - distance sensor within an object-following robot - it can communicate with the Host MCU at the rate of 1 MHz across the I2C channel. In comparison to it, VL53L8CH (option #2) would clearly be an \u201coverkill\u201d - even despite the double price range in comparison to the first option, it is simply \u201coverprovided\u201d with excessive functionality, that wouldn\u2019t be much relevant within the scope of the project(multizone data output, 4x4 matrix for gathering data from the multiple points within the FoV at a time, AI-supported features). At the same time, the VL53L1CXV0FY/1 (option #3) looks a lot similar to the option #1, however, it possess a significant drawback, represented by its I2C communication speed being less than half of the same parameter from VL53L4CD  - 400 kHz to 1 MHz - which may significantly affect the operation potential of a fast-moving system, such as the team project\u2019s future robot.</p>"},{"location":"Personal-Component-Selection/#2-adjustable-switching-regulator-33v-and-28v-selection","title":"2. Adjustable Switching Regulator (3.3V and 2.8V) Selection","text":"Solution Pros Cons * Option 1.* LM2575 Swithcing Voltage Regulator * $1.27/each * link to product * Includes a fixed-frequency oscillator* Incorporates internal frequency compensation* The feedback voltage is guaranteed ot +- 2% tolerance * Output can be easily adjusted from from 1.23 to 37 V(!!!) based on different voltage-dividing resistors combinations * The offered packaging is relatively big compared to the alternatives, meaning that less space is available on the motherboard for the rest of the circuitry* Noticeable pin size -&gt; might be problematic for standart SMD soldering throuhg the hot air reflow, might require soldering iron"},{"location":"Personal-Component-Selection/#3-voltage-level-translator-selection","title":"3. Voltage Level Translator Selection","text":""},{"location":"Personal-Component-Selection/#4-microcontroller-selection","title":"4. Microcontroller Selection","text":""},{"location":"Personal-Component-Selection/#declaration-of-personal-role-responsibilities-within-the-team","title":"Declaration of Personal Role &amp; Responsibilities Within the Team","text":"<p>The selected concept for the Spring 2025 semester project by team #204  is a bi-wheeled robot with object-following capabilities. Within the scope of this project, my primary responsibility area is focused around sensing functionality of the proposed robotic device. In this regard, I proposed the design involving placement of 3 identical Time-of-Flight(ToF) sensors in the frontal part of the robot, each directed outwards to the robot\u2019s center  in order to increase the Field of View available to the device. The process of selecting the actual market-available sensor solution was performed earlier in this document(the final choice was identified to be VL53L4CD). In order to transfer the observed data to the Host MCU, all three sensors will be using a single I2C bus (the approximated communication speed is expected to vary between 0.75-1 MHz). After the data was received and pre-processed(e.g. unit conversion) by the Host MCU, it will then be transferred to the neighboring MCU in the systems\u2019 UART daisy chain.</p>"},{"location":"Personal-Component-Selection/#proposed-microcontroller-solution-pic18f26q10","title":"Proposed Microcontroller Solution: PIC18F26Q10*","text":"PIC MCU Info Answer Model  PIC18F25Q10  Packaging type: SOIC/28 Product Page URL link Datasheet URL(s) link Application Notes URL(s) link Vendor link link Code Examples Github link Microchip link External Resources URL(s) link 1 Unit cost $1.11 Supply Voltage Range 1.8V to 5.5V Absolute Maximum current  (for entire IC) 350 mA Maximum GPIO current  (per pin) \u00b1 50 mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL MPLAB\u00ae SNAP  cost: $14.99(also provided within EGR314 standart student kit)  URL Works with MPLabX? Yes(chip is a direct product of Microchip) Works with Microchip Code Configurator? Yes(chip is a direct product of Microchip)"},{"location":"Personal-Component-Selection/#program-modules-diagram","title":"Program Modules Diagram","text":"Module # Available Needed Associated Pins (or * for any) GPIO 11 3 2, 3, 4 , 5, 6, 7, 9, 10, 11, 12, 13, 14 ADC - 0 - UART 1 1 6, 7, 25, 26 SPI - 0 15, 16, 17, 18 I2C 2 1 23, 24 PWM - 0 - ICSP 1 1 1, 27, 28 ... ... ... ..."},{"location":"Personal-Component-Selection/#pinout-and-modules-demonstration-in-mplabx","title":"Pinout and Modules Demonstration in MPLABX","text":"<p>The picture above demonstrates the pin allocation in the PIC18F25Q10 MCU, proposed as the sensor subsystem microcontroller, performed within the MPLAB X software environment. The pin distribution goes as follows: UART =&gt; pins # 6, 7, 25, 26 SPI(back-up serial interface, not intended for use in the standart configuration) =&gt; pins # 15, 16, 17, 18 I2C =&gt; pins # 23, 24 Sensor Hardware Interrupt =&gt; pins # 5, 6, 7 Voltage Level Translator Output Enable =&gt; pins # 9, 10, 11 Red LED =&gt; pin # 2 Green LED =&gt; pin # 3 PushButton =&gt; pin # 4 Reserve GPIO pins(provided with a male header-type output on the PCB) =&gt; pins # 12, 13, 14</p> <p>The picture below demonstrates the detailed outline of the selected pin allocation, sorted by the type and module affiliation(General I/O, UART, SPI, I2C)</p> <p> </p>"},{"location":"Personal-Component-Selection/#microcontroller-choice","title":"Microcontroller Choice","text":""},{"location":"Personal-Component-Selection/#pic18f26q10-selection-rationale","title":"PIC18F26Q10 Selection Rationale","text":"<p>I perceive the PIC18F26Q10 to be the optimal choice for the sensor subsystem of the robotic device proposed within our team\u2019s project. While being a part of a high-performing PIC18 chip family, this chip hosts only 28 pins in comparison to the standard 40-pin PIC18F47Q10 chip that is used as a general purpose MCU within the EGR314 course. By excluding 12 excess pins, the PIC18F26Q10 will help to reduce the size of both the subsystem\u2019s PCB and project\u2019s device - which is definitely important, being reminded the context of the devices\u2019 operation - mobile, fast-moving robot. Along with this, the selected MCU\u2019s operating speed of 64 MHz will be capable of providing instant communication with both the UART-based neighbor MCU-s, and three ToF sensors, placed on a single I2C bus(each operating on approximate communication speed of 1MHz), while 2048 bytes of RAM and 32K bytes of Flash Memory will provide for the flawless processing of the data received from the mentioned sensors. </p>"},{"location":"Personal-Component-Selection/#power-budget","title":"Power Budget","text":""},{"location":"Personal-Subsystem-Schematics/","title":"Personal Subsystem Schematics","text":""},{"location":"Personal-Subsystem-Schematics/#related-links-and-references","title":"Related Links and References","text":"<p>Link to the PDF version of the schematics shown above</p> <p>Link to the Altium\u2122 project zip archive of the schematics shown above</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}